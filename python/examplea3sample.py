def main():
# 이 줄은 'main'이라는 이름의 함수를 정의합니다. 
# 파이썬 프로그램은 종종 주요 실행 로직을 'main' 함수 안에 넣어 구조화합니다.
# 이렇게 하면 코드를 더 체계적으로 관리할 수 있고, 다른 스크립트에서 이 파일을 모듈로 가져올 때 
# 원치 않는 코드가 자동으로 실행되는 것을 방지할 수 있습니다 (if __name__ == "__main__": 구문과 함께 사용될 때).

    text = input("문장 입력 : ")
    # input("문장 입력 : "): 사용자에게 "문장 입력 : "이라는 메시지를 화면에 보여주고, 
    #                         사용자가 키보드로 무언가를 입력하고 엔터 키를 누를 때까지 기다립니다.
    # text = ...: 사용자가 입력한 문자열을 'text'라는 변수에 저장합니다.

    text = text.lower()
    # text.lower(): 'text' 변수에 저장된 문자열의 모든 알파벳 대문자를 소문자로 변환합니다. 
    #               예를 들어 "Hello World"는 "hello world"가 됩니다.
    # text = ...: 변환된 소문자 문자열을 다시 'text' 변수에 할당(덮어쓰기)합니다.
    # 이는 단어 수를 셀 때 대소문자를 구분하지 않기 위함입니다 (예: "The"와 "the"를 같은 단어로 취급).
    
    # 구두점 제거
    # 이 줄은 주석입니다. 코드 실행에 영향을 주지 않으며, 코드의 특정 부분에 대한 설명을 제공합니다.
    # 여기서는 다음 코드 블록이 구두점을 제거하는 역할을 한다는 것을 알려줍니다.

    clean_text = ""
    # 'clean_text'라는 이름의 빈 문자열 변수를 초기화합니다.
    # 이 변수에는 구두점이 제거되거나 공백으로 대체된 문자열이 저장될 것입니다.

    for ch in text:
    # 'text' 문자열 안에 있는 각 문자(character)에 대해 반복문을 실행합니다.
    # 첫 번째 반복에서는 'text'의 첫 번째 문자가 'ch' 변수에 할당되고, 
    # 두 번째 반복에서는 두 번째 문자가 'ch'에 할당되는 식으로 문자열 끝까지 반복합니다.

        if ch.isalnum() or ch.isspace():
        # ch.isalnum(): 현재 문자 'ch'가 알파벳(a-z, A-Z)이나 숫자(0-9)이면 True를 반환합니다.
        # ch.isspace(): 현재 문자 'ch'가 공백 문자(스페이스, 탭, 줄바꿈 등)이면 True를 반환합니다.
        # or: 두 조건 중 하나라도 True이면 전체 조건이 True가 됩니다.
        # 즉, 현재 문자가 알파벳, 숫자, 또는 공백 문자 중 하나인지 확인합니다.

            clean_text += ch
            # 만약 위 if 조건이 참(True)이면 (즉, 문자가 알파벳, 숫자, 또는 공백이면),
            # 현재 문자 'ch'를 'clean_text' 문자열의 끝에 추가합니다.
            # 'clean_text = clean_text + ch'와 동일한 의미입니다.

        else:
        # 만약 위 if 조건이 거짓(False)이면 (즉, 문자가 알파벳, 숫자, 공백이 아니라면 구두점으로 간주),
        # 이 else 블록 안의 코드가 실행됩니다.

            clean_text += " "  # 구두점은 공백으로 대체
            # 현재 문자 'ch'(구두점) 대신 공백 문자(" ")를 'clean_text' 문자열의 끝에 추가합니다.
            # 이렇게 하면 "hello,world" 같은 경우 "hello world"로 바뀌어 단어가 분리됩니다.

    words = clean_text.split()
    # clean_text.split(): 'clean_text' 문자열을 공백 문자를 기준으로 나눕니다. 
    #                     나눠진 각 부분(단어)들은 리스트(list)의 형태로 반환됩니다.
    #                     예를 들어 "hello world  example"은 ['hello', 'world', 'example']이 됩니다.
    #                     연속된 공백은 하나의 구분자로 취급되어 빈 문자열이 리스트에 포함되지 않습니다.
    # words = ...: 반환된 단어들의 리스트를 'words'라는 변수에 저장합니다.

    unique_words = []  # 중복 단어 방지용
    # 'unique_words'라는 이름의 빈 리스트를 초기화합니다.
    # 이 리스트는 이미 빈도수를 계산하고 출력한 단어들을 저장하여, 같은 단어의 빈도수를 여러 번 출력하는 것을 방지하는 데 사용됩니다.
    # 주석으로 그 용도를 설명하고 있습니다.

    for word in words:
    # 'words' 리스트 안에 있는 각 단어(word)에 대해 반복문을 실행합니다.

        if word not in unique_words:
        # 현재 단어 'word'가 'unique_words' 리스트 안에 존재하지 않으면 (즉, 아직 처리되지 않은 새로운 단어이면)
        # 이 if 블록 안의 코드가 실행됩니다.
        # 'not in'은 멤버십 연산자로, 특정 항목이 리스트에 없는지 확인할 때 사용합니다.

            unique_words.append(word)
            # 현재 단어 'word'를 'unique_words' 리스트에 추가합니다.
            # 이렇게 함으로써 다음번에 이 단어를 다시 만나더라도 위 if 조건이 거짓이 되어 중복 처리를 피할 수 있습니다.

            count = 0
            # 'count'라는 변수를 0으로 초기화합니다.
            # 이 변수는 현재 단어 'word'가 전체 'words' 리스트에 몇 번 나타나는지를 세는 데 사용됩니다.

            for w in words:
            # 다시 'words' 리스트 안에 있는 각 단어(여기서는 'w'라는 변수명으로)에 대해 내부 반복문을 실행합니다.
            # 외부 반복문에서 선택된 'word'의 빈도수를 세기 위해 전체 단어 리스트를 다시 한번 순회하는 것입니다.

                if w == word:
                # 내부 반복문의 현재 단어 'w'가 외부 반복문의 현재 단어 'word'와 같다면,
                # (즉, 우리가 빈도수를 세고 있는 단어와 일치한다면)
                # 이 if 블록 안의 코드가 실행됩니다.

                    count += 1
                    # 'count' 변수의 값을 1 증가시킵니다.
                    # 'count = count + 1'과 동일한 의미입니다.

            print(word, ":", count, "번")
            # print(): 괄호 안의 내용들을 화면에 출력합니다.
            # 현재 단어 'word', 콜론 문자 ":", 계산된 빈도수 'count', 그리고 문자열 "번"을 차례대로 출력합니다.
            # 예를 들어, "hello"라는 단어가 3번 나왔다면 "hello : 3 번"이라고 출력됩니다.

if __name__ == "__main__":
# 이 조건문은 특별한 내장 변수 '__name__'의 값을 확인합니다.
# 파이썬 인터프리터가 스크립트 파일을 직접 실행할 때, 그 스크립트의 '__name__' 변수에는 "__main__"이라는 문자열이 자동으로 할당됩니다.
# 만약 스크립트가 다른 스크립트에 의해 모듈로서 가져오기(import)된 경우에는, '__name__' 변수에는 그 모듈의 이름(파일명)이 할당됩니다.
# 따라서 이 조건은 "이 스크립트 파일이 직접 실행되었을 때만 다음 코드를 실행하라"는 의미입니다.

    main()
    # 위에서 정의한 'main' 함수를 호출(실행)합니다.
    # 스크립트가 직접 실행되면 프로그램의 주요 로직이 담긴 'main' 함수가 시작됩니다.